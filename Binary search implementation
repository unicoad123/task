class BinarySearchTree
{
    constructor()
    {
        this.root = null;
    }
    insert(data)
{
    var newNode = new Node(data);
 
    if(this.root === null)
        this.root = newNode;
    else
        this.insertNode(this.root, newNode);
}
insertNode(node, newNode)
{
    if(newNode.data < node.data)
    {
        
        if(node.left === null)
            node.left = newNode;
        else
            this.insertNode(node.left, newNode);
    }
    else
    {
        if(node.right === null)
            node.right = newNode;
        else
            this.insertNode(node.right,newNode);
    }
}
search(node, data)
{
    if(node === null)
        return null;
    else if(data < node.data)
        return this.search(node.left, data);
    else if(data > node.data)
        return this.search(node.right, data);
    else
        return node;
}
var BST = new BinarySearchTree();
BST.insert(15);
BST.insert(25);
BST.insert(10);
BST.insert(7);
BST.insert(22);
BST.insert(17);
BST.insert(13);
BST.insert(5);

}
